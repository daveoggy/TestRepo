<project name="MegaProject" default="rebuild">

    <!-- Configuration -->

    <!-- Build as: release, debug, etc. -->
    <property name="configuration" value="debug" />
	<!-- Git path -->
	<property name="git.path" value="C:\Users\vitalii.biliienko\AppData\Local\GitHub\PortableGit_8810fd5c2c79c73adcc73fd0825f3b32fdb816e7\bin\git.exe" />
    <!-- Output directory where our executables should be written to -->
    <property name="bin-directory" value="${directory::get-current-directory()}/bin/" />
    <!-- Location of the MSBuild executable -->
    <property name="msbuild" value="${framework::get-framework-directory(framework::get-target-framework())}\MSBuild.exe" />
	<!-- Location of version file -->
	<property name="version.file" value="${project::get-base-directory()}\Version.cs" />
	<!-- Build number -->
	<property name="build.number" value="0" overwrite="false"/>

    <!-- Main Targets -->

    <target name="clean" description="Delete all previously compiled binaries.">
        <delete>
            <fileset>
                <include name="**/bin/**" />
                <include name="**/obj/**" />
                <include name="**/*.suo" />
                <include name="**/*.user" />
            </fileset>
        </delete>
    </target>

    <target name="build" description="Build all application targets." depends="clean">
        <mkdir dir="${bin-directory}" />
        <call target="build.megaproject" />
    </target>

    <target name="rebuild" depends="clean, build" />

    <target name="test" description="Build test project and run all tests.">
        <mkdir dir="${bin-directory}" />
        <call target="build.tests" />
        <nunit2>
            <formatter type="Plain" />
            <test assemblyname="${bin-directory}/MegaProject.Data.Tests.dll" />
        </nunit2>
    </target>
	
	<target name="increment.version" desciption="Increment project version and commit it to repository">
		<call target="setversion" />
		<call target="commitversion" />
	</target>

    <!-- Secondary Targets -->

    <target name="build.megaproject">
        <exec program="${msbuild}" commandline='"MegaProject.sln" /v:n /nologo /t:Build /p:Configuration=${configuration};OutDir="${bin-directory}"' />
    </target>

    <target name="build.tests">
        <!-- Do not build verbosely (/v:q), user wants to see test results, not build output -->
        <exec program="${msbuild}" commandline='"MegaProject.Data.Tests/MegaProject.Data.Tests.csproj" /v:q /nologo /t:Build /p:Configuration=Debug;OutDir="${bin-directory}"' />
    </target>
	
	<!-- Helpers -->
	
	<target name="commitversion" desciption="Commit newly edited version file back to repository">
		<exec program="cmd.exe">
			<arg value="promote.bat" />
			<arg value="${git.path}" />
			<arg value="${version.file}" />
		</exec>
	</target>
	
	<target name="setversion" description="Stamp the version info onto assemblyinfo.cs files">
		<script language="C#">
			<references>
				<include name="System.dll" />
		   </references>
		  <imports>
			<import namespace="System.Diagnostics" />
			<import namespace="System.Text.RegularExpressions" />
		  </imports>
		   <code><![CDATA[
		    public static string ConvertRevision(Project project)
			{
				string gitPath = project.Properties["git.path"];
				project.Log(Level.Info, "Git path: " + gitPath);
				
				try {
					var p = new Process();
					p.StartInfo.RedirectStandardOutput = true;
					p.StartInfo.UseShellExecute = false;
					p.StartInfo.FileName = gitPath;
					p.StartInfo.Arguments = "describe --long";
					p.Start();
					var result = p.StandardOutput.ReadToEnd();
					p.WaitForExit();
					var match = Regex.Match(result, @"-(?<rev>\d+)-");
					var revisionsSinceTag = match.Groups["rev"].Value;
					project.Log(Level.Info, String.Format("{0} to {1}", result, revisionsSinceTag));
					return revisionsSinceTag;
				}
				catch
				{return "0";}
			}
		   
			public static void ScriptMain(Project project)
			{
				var buildNumber = project.Properties["build.number"];
				var fileName = project.Properties["version.file"];
				var match = Regex.Match(buildNumber, @"(?<main>\d+\.\d+)\.(?<build>\d+)\.(?<revision>\w+)");
				var build = match.Groups["build"].Value;
				var revision = match.Groups["revision"].Value;
				var main = match.Groups["main"].Value;

				var intVersion = String.Format("{0}.{1}.0", main, build);
				var txtVersion = String.Format("{0}.{1}.{2}", main, build, revision);


				var reader = new StreamReader(fileName);
				string contents = reader.ReadToEnd();
				reader.Close();
				project.Log(Level.Info, "Old versions: ");
				project.Log(Level.Info, contents);
				contents = Regex.Replace(contents, @"AssemblyVersion\(.*\)", String.Format("AssemblyVersion(\"{0}\")", intVersion));
				contents = Regex.Replace(contents, @"AssemblyFileVersion\(.*\)", String.Format("AssemblyFileVersion(\"{0}\")", intVersion));
				contents = Regex.Replace(contents, @"AssemblyInformationalVersion\(.*\)", String.Format("AssemblyInformationalVersion(\"{0}\")", txtVersion));
				project.Log(Level.Info, "New versions: ");
				project.Log(Level.Info, contents);
				var writer = new StreamWriter(fileName, false);
				writer.Write(contents);
				writer.Close();
			}
			]]>
		   </code>
		</script>   
 </target>
</project>